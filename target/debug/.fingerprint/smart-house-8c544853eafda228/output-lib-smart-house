{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/house/mod.rs","byte_start":924,"byte_end":944,"line_start":36,"line_end":36,"column_start":23,"column_end":43,"is_primary":true,"text":[{"text":"            return Ok(&mut self.rooms[pos]);","highlight_start":23,"highlight_end":43}],"label":"lifetime mismatch","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected mutable reference `&mut Room<'_>`\n   found mutable reference `&mut Room<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the anonymous lifetime defined on the method body at 34:21...","code":null,"level":"note","spans":[{"file_name":"src/house/mod.rs","byte_start":745,"byte_end":757,"line_start":34,"line_end":34,"column_start":21,"column_end":33,"is_primary":true,"text":[{"text":"    pub fn room_mut(&'_ mut self, room_name: &str) -> Result<&mut Room, CustomError> {","highlight_start":21,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...does not necessarily outlive the lifetime `'_` as defined on the impl at 10:12","code":null,"level":"note","spans":[{"file_name":"src/house/mod.rs","byte_start":163,"byte_end":165,"line_start":10,"line_end":10,"column_start":12,"column_end":14,"is_primary":true,"text":[{"text":"impl House<'_> {","highlight_start":12,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/house/mod.rs:36:23\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m36\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m            return Ok(&mut self.rooms[pos]);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mlifetime mismatch\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected mutable reference `\u001b[0m\u001b[0m\u001b[1m&mut Room<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found mutable reference `\u001b[0m\u001b[0m\u001b[1m&mut Room<'_>\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the anonymous lifetime defined on the method body at 34:21...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/house/mod.rs:34:21\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn room_mut(&'_ mut self, room_name: &str) -> Result<&mut Room, CustomError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...does not necessarily outlive the lifetime `'_` as defined on the impl at 10:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/house/mod.rs:10:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl House<'_> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\n"}
{"message":"mismatched types","code":{"code":"E0308","explanation":"Expected type did not match the received type.\n\nErroneous code examples:\n\n```compile_fail,E0308\nfn plus_one(x: i32) -> i32 {\n    x + 1\n}\n\nplus_one(\"Not a number\");\n//       ^^^^^^^^^^^^^^ expected `i32`, found `&str`\n\nif \"Not a bool\" {\n// ^^^^^^^^^^^^ expected `bool`, found `&str`\n}\n\nlet x: f32 = \"Not a float\";\n//     ---   ^^^^^^^^^^^^^ expected `f32`, found `&str`\n//     |\n//     expected due to this\n```\n\nThis error occurs when an expression was used in a place where the compiler\nexpected an expression of a different type. It can occur in several cases, the\nmost common being when calling a function and passing an argument which has a\ndifferent type than the matching type in the function declaration.\n"},"level":"error","spans":[{"file_name":"src/house/mod.rs","byte_start":1358,"byte_end":1362,"line_start":48,"line_end":48,"column_start":25,"column_end":29,"is_primary":true,"text":[{"text":"        self.rooms.push(room);","highlight_start":25,"highlight_end":29}],"label":"lifetime mismatch","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"expected struct `Room<'_>`\n   found struct `Room<'_>`","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"the anonymous lifetime defined on the method body at 42:38...","code":null,"level":"note","spans":[{"file_name":"src/house/mod.rs","byte_start":1069,"byte_end":1073,"line_start":42,"line_end":42,"column_start":38,"column_end":42,"is_primary":true,"text":[{"text":"    pub fn add_room(&mut self, room: Room) -> Result<&Room, CustomError> {","highlight_start":38,"highlight_end":42}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...does not necessarily outlive the lifetime `'_` as defined on the impl at 10:12","code":null,"level":"note","spans":[{"file_name":"src/house/mod.rs","byte_start":163,"byte_end":165,"line_start":10,"line_end":10,"column_start":12,"column_end":14,"is_primary":true,"text":[{"text":"impl House<'_> {","highlight_start":12,"highlight_end":14}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0308]\u001b[0m\u001b[0m\u001b[1m: mismatched types\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/house/mod.rs:48:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m48\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.rooms.push(room);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mlifetime mismatch\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected struct `Room<\u001b[0m\u001b[0m\u001b[1m'_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m              found struct `Room<\u001b[0m\u001b[0m\u001b[1m'_\u001b[0m\u001b[0m>`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: the anonymous lifetime defined on the method body at 42:38...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/house/mod.rs:42:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn add_room(&mut self, room: Room) -> Result<&Room, CustomError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...does not necessarily outlive the lifetime `'_` as defined on the impl at 10:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/house/mod.rs:10:12\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl House<'_> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\n"}
{"message":"cannot infer an appropriate lifetime for automatic coercion due to conflicting requirements","code":{"code":"E0495","explanation":"A lifetime cannot be determined in the given situation.\n\nErroneous code example:\n\n```compile_fail,E0495\nfn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    match (&t,) { // error!\n        ((u,),) => u,\n    }\n}\n\nlet y = Box::new((42,));\nlet x = transmute_lifetime(&y);\n```\n\nIn this code, you have two ways to solve this issue:\n 1. Enforce that `'a` lives at least as long as `'b`.\n 2. Use the same lifetime requirement for both input and output values.\n\nSo for the first solution, you can do it by replacing `'a` with `'a: 'b`:\n\n```\nfn transmute_lifetime<'a: 'b, 'b, T>(t: &'a (T,)) -> &'b T {\n    match (&t,) { // ok!\n        ((u,),) => u,\n    }\n}\n```\n\nIn the second you can do it by simply removing `'b` so they both use `'a`:\n\n```\nfn transmute_lifetime<'a, T>(t: &'a (T,)) -> &'a T {\n    match (&t,) { // ok!\n        ((u,),) => u,\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/room/mod.rs","byte_start":1118,"byte_end":1124,"line_start":39,"line_end":39,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"        self.devices.push(device);","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 33:42...","code":null,"level":"note","spans":[{"file_name":"src/room/mod.rs","byte_start":804,"byte_end":815,"line_start":33,"line_end":33,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn add_device(&mut self, device: &dyn Device) -> Result<&dyn Device, CustomError> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...so that reference does not outlive borrowed content","code":null,"level":"note","spans":[{"file_name":"src/room/mod.rs","byte_start":1118,"byte_end":1124,"line_start":39,"line_end":39,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"        self.devices.push(device);","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"but, the lifetime must be valid for the lifetime `'_` as defined on the impl at 9:11...","code":null,"level":"note","spans":[{"file_name":"src/room/mod.rs","byte_start":146,"byte_end":148,"line_start":9,"line_end":9,"column_start":11,"column_end":13,"is_primary":true,"text":[{"text":"impl Room<'_> {","highlight_start":11,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...so that the expression is assignable","code":null,"level":"note","spans":[{"file_name":"src/room/mod.rs","byte_start":1118,"byte_end":1124,"line_start":39,"line_end":39,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"        self.devices.push(device);","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected `&dyn Device`\n   found `&dyn Device`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0495]\u001b[0m\u001b[0m\u001b[1m: cannot infer an appropriate lifetime for automatic coercion due to conflicting requirements\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/room/mod.rs:39:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.devices.push(device);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 33:42...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/room/mod.rs:33:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn add_device(&mut self, device: &dyn Device) -> Result<&dyn Device, CustomError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...so that reference does not outlive borrowed content\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/room/mod.rs:39:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.devices.push(device);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: but, the lifetime must be valid for the lifetime `'_` as defined on the impl at 9:11...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/room/mod.rs:9:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl Room<'_> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...so that the expression is assignable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/room/mod.rs:39:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.devices.push(device);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected `\u001b[0m\u001b[0m\u001b[1m&dyn Device\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found `\u001b[0m\u001b[0m\u001b[1m&dyn Device\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"cannot infer an appropriate lifetime due to conflicting requirements","code":{"code":"E0495","explanation":"A lifetime cannot be determined in the given situation.\n\nErroneous code example:\n\n```compile_fail,E0495\nfn transmute_lifetime<'a, 'b, T>(t: &'a (T,)) -> &'b T {\n    match (&t,) { // error!\n        ((u,),) => u,\n    }\n}\n\nlet y = Box::new((42,));\nlet x = transmute_lifetime(&y);\n```\n\nIn this code, you have two ways to solve this issue:\n 1. Enforce that `'a` lives at least as long as `'b`.\n 2. Use the same lifetime requirement for both input and output values.\n\nSo for the first solution, you can do it by replacing `'a` with `'a: 'b`:\n\n```\nfn transmute_lifetime<'a: 'b, 'b, T>(t: &'a (T,)) -> &'b T {\n    match (&t,) { // ok!\n        ((u,),) => u,\n    }\n}\n```\n\nIn the second you can do it by simply removing `'b` so they both use `'a`:\n\n```\nfn transmute_lifetime<'a, T>(t: &'a (T,)) -> &'a T {\n    match (&t,) { // ok!\n        ((u,),) => u,\n    }\n}\n```\n"},"level":"error","spans":[{"file_name":"src/room/mod.rs","byte_start":1118,"byte_end":1124,"line_start":39,"line_end":39,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"        self.devices.push(device);","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 33:42...","code":null,"level":"note","spans":[{"file_name":"src/room/mod.rs","byte_start":804,"byte_end":815,"line_start":33,"line_end":33,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    pub fn add_device(&mut self, device: &dyn Device) -> Result<&dyn Device, CustomError> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...so that the declared lifetime parameter bounds are satisfied","code":null,"level":"note","spans":[{"file_name":"src/room/mod.rs","byte_start":1118,"byte_end":1124,"line_start":39,"line_end":39,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"        self.devices.push(device);","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"but, the lifetime must be valid for the lifetime `'_` as defined on the impl at 9:11...","code":null,"level":"note","spans":[{"file_name":"src/room/mod.rs","byte_start":146,"byte_end":148,"line_start":9,"line_end":9,"column_start":11,"column_end":13,"is_primary":true,"text":[{"text":"impl Room<'_> {","highlight_start":11,"highlight_end":13}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"...so that the expression is assignable","code":null,"level":"note","spans":[{"file_name":"src/room/mod.rs","byte_start":1118,"byte_end":1124,"line_start":39,"line_end":39,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"        self.devices.push(device);","highlight_start":27,"highlight_end":33}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"expected `&dyn Device`\n   found `&dyn Device`","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0495]\u001b[0m\u001b[0m\u001b[1m: cannot infer an appropriate lifetime due to conflicting requirements\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/room/mod.rs:39:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.devices.push(device);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: first, the lifetime cannot outlive the anonymous lifetime defined on the method body at 33:42...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/room/mod.rs:33:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    pub fn add_device(&mut self, device: &dyn Device) -> Result<&dyn Device, CustomError> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...so that the declared lifetime parameter bounds are satisfied\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/room/mod.rs:39:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.devices.push(device);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: but, the lifetime must be valid for the lifetime `'_` as defined on the impl at 9:11...\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/room/mod.rs:9:11\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m9\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mimpl Room<'_> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: ...so that the expression is assignable\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/room/mod.rs:39:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m39\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        self.devices.push(device);\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: expected `\u001b[0m\u001b[0m\u001b[1m&dyn Device\u001b[0m\u001b[0m`\u001b[0m\n\u001b[0m              found `\u001b[0m\u001b[0m\u001b[1m&dyn Device\u001b[0m\u001b[0m`\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0308, E0495.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0308, E0495.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0308`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0308`.\u001b[0m\n"}
